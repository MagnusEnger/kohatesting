#!/bin/bash
#
# testkoha -- Automate some of the tedious tasks of testing patches 
# Copyright 2011 Magnus Enger Libriotech
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

usage="Usage: $0 [--configfile /path/to/config] bugnumber"

everything_is_commited() {
  if git status --short | grep -q '^'
  then
    return 1
  else
    return 0
  fi
}

die() {
    echo "$@" 1>&2
    exit 1
}

signoff() {
  git commit --amend -s
  git bz attach -e $1 HEAD
  # We don't send signedoff patches to the mail list any longer
  # FIXME The name of the remote for the official repo should be configurable
  # git send-email origin/master
  echo "Please go to http://bugs.koha-community.org/bugzilla3/show_bug.cgi?id=$1 and change the Status to Signed Off."
}

# Check we have the correct number of arguments
[ $# -ge 1 ] && [ $# -le 3 ] || die $usage

# Set defaults and some other variables
KOHACLONE="/home/koha/kohaclone/"
DBDUMPDIR="/home/koha/kohatestdb/"
DBDUMP="testing.sql"
DBNAME="koha"
DBUSER="kohaadmin"
DBHOST="localhost"
DBPASS="katikoan"
DATE=$(date +%F)

# Get command line options
TEMP=`getopt -o c: -l configfile: -n "$0" -- "$@"`
eval set -- "$TEMP"
while true ; do
	case "$1" in
		-c|--configfile) configfile="$2" ; shift 2 ;;
		--) shift ; break ;;
		*) die "Internal error processing command line arguments" ;;
	esac
done

# Load the configfile given on the command line
if [ "$configfile" != "" ]
then
    if [ -e "$configfile" ]
    then
        . "$configfile"
    else
        die "$configfile does not exist.";
    fi
fi

# Get the bug number
bugnumber="$1"

# Assemble the name of the DB dump
dbfile="$DBDUMPDIR/$DBDUMP"

# Check that the DB dump actually exists
if [ -e "$dbfile" ]
then
  echo "OK, $dbfile exists"
else
  die "$dbfile does not exist.";
fi

# Move to the directory that has the git repo
cd $KOHACLONE

# TODO Check that the current directory is a git repo

# Make sure there are no uncomitted changes
if ! everything_is_commited
then
  die "Cannot proceed: uncommitted changes!"
else 
  echo "No uncommitted changes"
fi
    
# Say what we are going to do
cat <<eoh
Going to test bug number $bugnumber with the following parameters:
Koha directory:    $KOHACLONE
Database dump:     $dbfile
Dir of DB-files:   $DBDUMPDIR
Database name:     $DBNAME
Database user:     $DBUSER
Database host:     $DBHOST
Database password: ***

eoh

# Load the testing database
echo "Loading $dbfile"
mysql --host="$DBHOST" --user="$DBUSER" --password="$DBPASS" "$DBNAME" < $dbfile

# Make sure we are on the master branch before we proceed
git checkout master

# Update the code and the database
git pull

# TODO Delete this code:
# Create a directory for the temporary files, if it does not exist
# mytmpdir="${DBDUMPDIR}testkohatmp"
# if [ -e "$mytmpdir" ]
# then
#   # TODO Check permissions
#   echo "$mytmpdir exists"
# else
#   mkdir "$mytmpdir"
#   echo "Created $mytmpdir"
# fi

# TODO Remove this code
# Backup database
# echo "Dumping database..."
# dbtmpfile="$mytmpdir/backup.sql"
# mysqldump --host="$DBHOST" --user="$DBUSER" --password="$DBPASS" "$DBNAME" > $dbtmpfile

# Create a branch to test in
# FIXME What to do if the branch already exists? 
git checkout -b bug$bugnumber origin/master

# Use git bz to get patches? Or ask for the URLs of patches as input?
git bz apply $bugnumber

# FIXME Ask the user if the patches applied cleanly
# If yes: proceed
# If no:  - give the user a shell (screen?) to sort the situation out
#         - tell the user to go to bugzilla and change status to "Does
#           not apply", then clean up

# Update the database, after giving the user a chance to change
# updatedatabase.pl ($DBversion = '3.06.00.XXX';)
read -p "Do you want to edit updatedatabase.pl? [y/n] " -n1 editupdatedb
if [ $editupdatedb == 'y' ]; then
  # This might be unnecessary once the new system for database 
  # updates is in place?
  vim installer/data/mysql/updatedatabase.pl
fi
# Update the database
perl installer/data/mysql/updatedatabase.pl

# Let the user choose to run Koha's tests
# TODO Make this configurable through the config file: always/never/ask
# FIXME Looks like the whole script exits if the tests fail? 
# while true; do
#     read -p "Do you wish to run Koha's test suite? (yes/no) " yn
#     case $yn in
#         [Yy]* ) prove; break;;
#         [Nn]* ) break;;
#         * ) echo "Please answer yes or no.";;
#     esac
# done

echo "Now test the changes!"

# TODO Let the user choose to enter a "screen" session, to be able to
# do stuff on the commandline while testing, without opening another
# terminal

# Ask if the user is ready to sign off 
# FIXME Only works with one patch!
while true; do
    read -p "Do you wish to sign off on that? [y/n] " so_yn
    case $so_yn in
        [Yy]* ) signoff $bugnumber; break;; 
        [Nn]* ) echo "Please go to http://bugs.koha-community.org/bugzilla3/show_bug.cgi?id=$bugnumber and report on why you do not want to sign off."; break;;
        * ) echo "Please answer yes or no.";;
    esac
done

# Clean up

# Check out master again
# TODO Let the user choose to keep or delete the branch
# FIXME This will fail if there are changes to e.g. updatedatabase
git checkout master 

# Let the user choose to keep a dump of the database after testing
# Construct the filename
keepdbfile="$DBDUMPDIR/kohatest-bug$bugnumber-$DATE.sql"
while true; do
    read -p "Do you wish to save a dump of the database [y/n] " keepdb_yn
    case $keepdb_yn in
        [Yy]* ) echo "Dumping database as $keepdbfile..."; mysql --host="$DBHOST" --user="$DBUSER" --password="$DBPASS" "$DBNAME" > "$keepdbfile"; break;;
        [Nn]* ) echo "Database not dumped"; break;;
        * ) echo "Please answer yes or no.";;
    esac
done
