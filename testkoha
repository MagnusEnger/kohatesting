#!/bin/sh
#
# testkoha -- Automate some of the tedious tasks of testing patches 
# Copyright 2011 Magnus Enger Libriotech
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

usage="Usage: $0 [--configfile /path/to/config] bugnumber"

everything_is_commited() {
  if git status --short | grep -q '^'
  then
    return 1
  else
    return 0
  fi
}

die() {
    echo "$@" 1>&2
    exit 1
}

# Set defaults and read config file, if it exists.
KOHACLONE="~/kohaclone"
TMPDIR="/tmp/"
DBNAME="koha"
DBUSER="kohaadmin"
DBHOST="localhost"
DBPASS="katikoan"

[ $# -ge 1 ] && [ $# -le 3 ] || die $usage

TEMP=`getopt -o c: -l configfile: \
     -n "$0" -- "$@"`

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-c|--configfile) configfile="$2" ; shift 2 ;;
		--) shift ; break ;;
		*) die "Internal error processing command line arguments" ;;
	esac
done

# Load the configfile given on the command line
if [ "$configfile" != "" ]
then
    if [ -e "$configfile" ]
    then
        . "$configfile"
    else
        die "$configfile does not exist.";
    fi
fi

# Get the bug number
bugnumber="$1"

# Say what we are going to do
cat <<eoh
Going to test bug number $bugnumber with the following parameters:
Koha directory:    $KOHACLONE
Temporary files:   $TMPDIR
Database name:     $DBNAME
Database user:     $DBUSER
Database host:     $DBHOST
Database password: ***

eoh

# Move to the directory that has the git repo
cd $KOHACLONE

# TODO Check that the current directory is a git repo

# Make sure there are no uncomitted changes
if ! everything_is_commited
then
  die "Cannot proceed: uncommitted changes!"
else 
  echo "No uncommitted changes"
fi
  
# Make sure we are on the master branch before we proceed
git checkout master

# Update the code and the database
git pull
perl installer/data/mysql/updatedatabase.pl

# Create a directory for the temporary files, if it does not exist
mytmpdir="${TMPDIR}testkohatmp"
if [ -e "$mytmpdir" ]
then
  # TODO Check permissions
  echo "$mytmpdir exists"
else
  mkdir "$mytmpdir"
  echo "Created $mytmpdir"
fi

# Backup database
echo "Dumping database..."
dbtmpfile="$mytmpdir/backup.sql"
mysqldump --host="$DBHOST" --user="$DBUSER" --password="$DBPASS" "$DBNAME" > $dbtmpfile

# Create a branch to test in
git checkout -b bug$bugnumber origin/master

# Use git bz to get patches? Or ask for the URLs of patches as input?
git bz apply $bugnumber

# Update the database
perl installer/data/mysql/updatedatabase.pl

# Let the user choose to run Koha's tests
# TODO Make this configurable through the config file: always/never/ask
while true; do
    read -p "Do you wish to run Koha's test suite? (yes/no) " yn
    case $yn in
        [Yy]* ) prove; break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.";;
    esac
done

echo "Now test the changes!"

# Ask if the user is ready to sign off 
while true; do
    read -p "Do you wish to sign off on that? (yes/no) " so_yn
    case $so_yn in
        [Yy]* ) git commit --amend -s; git bz attach -e xxxx HEAD; break;; 
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.";;
    esac
done

# Clean up

# Check out master again
# TODO Let the user choose to checkout master and keep the branch
# or delete the branch
git checkout master 

# Restore database
echo "Restoring database..."
mysql --host="$DBHOST" --user="$DBUSER" --password="$DBPASS" "$DBNAME" < $dbtmpfile

# Remove any files created during testing 
rm $mytmpdir/*
